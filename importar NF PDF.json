{
  "name": "importar NF PDF",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "uploadpdf",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2.1,
      "position": [
        -96,
        -144
      ],
      "id": "ef007dc5-ac93-4f33-977c-dee29293f509",
      "name": "Webhook",
      "webhookId": "d80dc976-b192-4c9f-bc7d-a148c0c9f7a6"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Você receberá o conteúdo da variável {{ $json.campo_2 }}.\n\nSua tarefa é identificar todos os produtos mencionados nesse texto e retornar apenas um JSON válido (não inclua nenhum texto adicional, explicação ou comentário).\n\nMantenha o formato exatamente como especificado, sem comentários, explicações ou informações extras, formato obrigatório para cada produto:\n\n{\n\"produto\": \"\",\n\"valor_unitario\": 0.0,\n\"quantidade\": 0.0,\n\"valor_total\": 0.0\n}\n\nVocê irá executar o comando do prompt, seguindo sempre as regras abaixo:\n\nRegras obrigatórias:\n\nNão inclua nenhum espaço extra no json final.\n\nNenhum campo (produto, valor_unitario, quantidade, valor_total) pode ficar vazio.\n\nSe algum campo não puder ser preenchido corretamente, ignore essa linha completamente.\n\nproduto deve ser constituído praticamente apenas de texto podendo ter mais de uma palavra.\n\nvalor_unitario, quantidade e valor_total devem ser apenas números com ponto como separador decimal.\n\nO valor de valor_unitario * quantidade deve ser exatamente igual a valor_total.\n\nSe os valores extraídos inicialmente não baterem, ajuste quantidade ou valor_unitario conforme indicado no texto para que a multiplicação seja exata.\n\nvalor_total deve ser sempre maior ou igual a valor_unitario.\n\nRetorne somente o JSON final, sem nada mais.\n\nSe houver mais de um produto, retorne um array de objetos JSON.\n\nIgnore qualquer texto irrelevante do documento.\n\nSe a lista for muito longa e houver risco de truncamento, divida a saída em partes sequenciais, mas garanta que cada parte seja um JSON válido, e depois combine-as para formar o JSON final completo.\n\nInstrução extra:\n\nCertifique-se de incluir todos os produtos completos presentes no texto, mesmo que a lista seja extensa.\n\nMantenha o formato exatamente como especificado, sem comentários, explicações ou informações extras.\n\nIgnore qualquer código numérico de 9 dígitos.\n\nIgnore qualquer número de 3 dígitos que finalize com: 00, 10, 20, 30, 40, 41, 50, 51, 60, 70, 90.\n\nIgnore qualquer código de 4 dígitos que finalize com: 101, 102, 103, 201, 202, 203, 300, 400, 500, 900.\n\nEm seguida, a saída final deve ser:\n\n{\n  \"produto\": \"\",\n  \"valor_unitario\": 0.0,\n  \"quantidade\": 0.0,\n  \"valor_total\": 0.0\n}",
        "needsFallback": true,
        "options": {
          "maxIterations": 1
        }
      },
      "type": "@n8n/n8n-nodes-langchain.agent",
      "typeVersion": 2.2,
      "position": [
        560,
        -80
      ],
      "id": "9622f34b-2b52-407b-94d7-1462fefaa851",
      "name": "AI Agent"
    },
    {
      "parameters": {
        "model": "moonshotai/kimi-k2-instruct-0905",
        "options": {
          "maxTokensToSample": 16384,
          "temperature": 0.3
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        496,
        112
      ],
      "id": "ed3220ca-7865-418e-a7ec-059ebe5d53d0",
      "name": "Principal",
      "credentials": {
        "groqApi": {
          "id": "Dc7vL5H0Vo1ghi2a",
          "name": "Groq account 2"
        }
      }
    },
    {
      "parameters": {
        "model": "openai/gpt-oss-20b",
        "options": {
          "maxTokensToSample": 20000,
          "temperature": 0.3
        }
      },
      "type": "@n8n/n8n-nodes-langchain.lmChatGroq",
      "typeVersion": 1,
      "position": [
        608,
        112
      ],
      "id": "943002c2-b019-4c35-a729-dcd91c4b04c1",
      "name": "Secundário",
      "credentials": {
        "groqApi": {
          "id": "Dc7vL5H0Vo1ghi2a",
          "name": "Groq account 2"
        }
      }
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "const texto = $json.campo_1;\nconst regexChave = /(?:\\b\\d{4}\\b\\s?){11}/g;\nconst regexData = /(0[1-9]|[12][0-9]|3[01])\\/(0[1-9]|1[0-2])\\/\\d{4}/;\n\nlet matchChave = texto.match(regexChave);\nif (!matchChave) matchChave = texto.match(/(?:\\d\\s*){44}/g);\nconst matchData = texto.match(regexData);\n\nconst chave = matchChave[0].replaceAll(\" \", \"\").replaceAll(\"\\n\", \"\");\nif (!chave) return { Erro: \"Erro ao capturar a chave\" };\nconst emissao = matchData[0];\nif (!emissao) return { Erro: \"Erro ao capturar a data de emissão\" };\n\nconst numero = chave.slice(25, 34).replaceAll(\"\\n\", \"\");\nconst cnpj = chave.slice(6, 20).replaceAll(\"\\n\", \"\");\n\nif (!cnpj) return { Erro: \"Erro ao capturar a CNPJ\" };\n\nconst url = `https://www.receitaws.com.br/v1/cnpj/${cnpj}`;\nconst urlFallback = `https://brasilapi.com.br/api/cnpj/v1/${cnpj}`;\n\n// function wait(ms) {\n//   return new Promise((resolve) => setTimeout(resolve, ms));\n// }\n// await wait(1000);\n\nasync function teste(url) {\n  const a = await this.helpers.request({\n    method: \"GET\",\n    url: url,\n    json: true,\n    headers: {\n      \"User-Agent\": \"n8n\",\n    },\n  });\n  return a;\n}\n\nlet response;\ntry {\n  response = await teste(url);\n} catch(e) {\n  response = await teste(urlFallback);\n}\n\nconst emitente = response.fantasia || response.nome || response.nome_fantasia || response.razao_social;\n\nif (!emitente) return { Erro: \"Erro ao capturar o emitente\" };\n\nreturn { index: $itemIndex, chave, numero, cnpj, emissao, emitente };\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        560,
        -192
      ],
      "id": "8f31767d-5e85-4259-959c-c40e3e88edb6",
      "name": "Get info NFe"
    },
    {
      "parameters": {
        "mode": "combine",
        "fieldsToMatchString": "index",
        "options": {}
      },
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        976,
        -176
      ],
      "id": "5ae535bb-6d4b-4941-abee-68bc20cf2222",
      "name": "Merge and await data"
    },
    {
      "parameters": {
        "batchSize": "={{ $input.last().json.comp }}",
        "options": {}
      },
      "type": "n8n-nodes-base.splitInBatches",
      "typeVersion": 3,
      "position": [
        384,
        -144
      ],
      "id": "eaf0f970-187d-4087-a5c4-062f10f1dd4b",
      "name": "Loop Over NFs"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.merge",
      "typeVersion": 3.2,
      "position": [
        240,
        -144
      ],
      "id": "f10a518e-b587-41d9-8b9d-8551fa39e4ac",
      "name": "Merge and treat data"
    },
    {
      "parameters": {
        "jsCode": "let a = {}\n$input.first().json.body.finalResult.forEach((item, i)=>{\n  a[i] = item\n})\n\nreturn Object.values(a)"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        80,
        -208
      ],
      "id": "a9c7782a-a21e-4410-8d38-7fede0afa6b7",
      "name": "Format NF data"
    },
    {
      "parameters": {
        "jsCode": "return [{comp: $input.first().json.body.finalResult.length}];"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        80,
        -80
      ],
      "id": "b23faf6a-eb42-4e6a-84d1-432862727fba",
      "name": "Get length data"
    },
    {
      "parameters": {
        "mode": "runOnceForEachItem",
        "jsCode": "let produtos = JSON.parse($json.output)\nif(!Array.isArray(produtos)) produtos = [produtos]\nreturn {index: $itemIndex, produtos};\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        832,
        -80
      ],
      "id": "57d4d89f-3ebd-411f-a845-1e7b38ed2483",
      "name": "Format JSON"
    },
    {
      "parameters": {
        "operation": "append",
        "documentId": {
          "__rl": true,
          "mode": "list",
          "value": ""
        },
        "sheetName": {
          "__rl": true,
          "mode": "list",
          "value": ""
        }
      },
      "type": "n8n-nodes-base.googleSheets",
      "typeVersion": 4.7,
      "position": [
        1136,
        -176
      ],
      "id": "abe83755-d833-474f-82d7-7bc4124a51d3",
      "name": "Append row in sheet"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Format NF data",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get length data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI Agent": {
      "main": [
        [
          {
            "node": "Format JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Principal": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Secundário": {
      "ai_languageModel": [
        [
          {
            "node": "AI Agent",
            "type": "ai_languageModel",
            "index": 1
          }
        ]
      ]
    },
    "Get info NFe": {
      "main": [
        [
          {
            "node": "Merge and await data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge and await data": {
      "main": [
        []
      ]
    },
    "Loop Over NFs": {
      "main": [
        [],
        [
          {
            "node": "AI Agent",
            "type": "main",
            "index": 0
          },
          {
            "node": "Get info NFe",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Merge and treat data": {
      "main": [
        [
          {
            "node": "Loop Over NFs",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Format NF data": {
      "main": [
        [
          {
            "node": "Merge and treat data",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Get length data": {
      "main": [
        [
          {
            "node": "Merge and treat data",
            "type": "main",
            "index": 1
          }
        ]
      ]
    },
    "Format JSON": {
      "main": [
        [
          {
            "node": "Merge and await data",
            "type": "main",
            "index": 1
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "0b800afd-d563-4fbc-9bbc-96df1da857a9",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "abcf850f40a6c353be28eb69764fc3b8fe368ebccc4df1352134ea3af8b93e1d"
  },
  "id": "XEsksa4B0s9f7hGS",
  "tags": []
}